<!DOCTYPE html>
<html ng-app="chatApp">
<head>
    <title><%= title %></title>
    <style>
        .container {
            max-width: 100%;
            margin: 0 auto;
            border: 1px solid #000;
            padding: 10px;
            box-sizing: border-box;
        }

        .input-group {
            margin-bottom: 10px;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
        }

        .input-group input {
            width: 100%;
            padding: 5px;
            box-sizing: border-box;
        }

        .button {
            width: 100%;
            padding: 10px;
            background-color: #ccc;
            border: none;
            cursor: pointer;
        }

        .chat-window {
            border-top: 1px solid #000;
            padding-top: 10px;
            margin-top: 10px;
            max-height: 60vh;
            overflow-y: auto;
        }

        .chat-message {
            margin-bottom: 10px;
        }

        .chat-input {
            display: flex;
            margin-top: 10px;
        }

        .chat-input input {
            flex: 1;
            padding: 5px;
        }

        .chat-input button {
            padding: 5px 10px;
            background-color: #ccc;
            border: none;
            cursor: pointer;
        }

        .timestamp {
            font-size: small;
            color: #666;
            text-align: right;
        }
    </style>
</head>
<body ng-controller="ChatController">
<div class="container">
    <div class="input-group">
        <label for="myId">My ID</label>
        <input type="text" id="myId" ng-model="myId" ng-disabled="connected" placeholder="Enter your Client ID">
    </div>
    <div class="input-group">
        <label for="friendId">Friend ID</label>
        <input type="text" id="friendId" ng-model="friendId" ng-disabled="connected"
               placeholder="Enter client ID to start the chat">
    </div>
    <button class="button" ng-click="connect()" ng-if="!connected">Connect</button>
    <button class="button" ng-click="reset()" ng-if="connected">Reset</button>
    <div class="chat-window" ng-if="connected">
        <button class="button" ng-click="loadMoreMessages()">Load More Messages</button>
        <div class="chat-message" ng-repeat="message in messages">
            <strong>{{message.name}}:</strong> {{message.message}}
            <div class="timestamp">{{message.timestamp | date:'medium'}}</div>
        </div>
    </div>
    <div class="chat-input" ng-if="connected">
        <input type="text" ng-model="newMessage" placeholder="Enter message to send"
               ng-keydown="checkEnter($event,newMessage)">
        <button ng-click="sendMessage(newMessage)">Send</button>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
<script src="https://cdn.socket.io/4.8.0/socket.io.min.js"></script>
<script>
    angular.module('chatApp', [])
        .controller('ChatController', function ($scope) {
            let counter = 0;
            let lastMessageId = null;
            const socket = io({
                auth: {
                    serverOffset: 0
                },
                ackTimeout: 500,
                retries: 10,
            });

            $scope.connected = false;
            $scope.messages = [];
            $scope.myId = '';
            $scope.friendId = '';
            $scope.newMessage = '';
            $scope.room = '';

            $scope.connect = function () {
                if ($scope.myId && $scope.friendId) {
                    if ($scope.myId < $scope.friendId) {
                        $scope.room = $scope.myId + '_' + $scope.friendId;
                    } else {
                        $scope.room = $scope.friendId + '_' + $scope.myId;
                    }
                    socket.emit('join room', {name: $scope.myId, room: $scope.room}, (error) => {
                        if (error) {
                            console.error(error);
                            return;
                        }
                    });
                    console.log('Connected to room:', $scope.room);
                    $scope.connected = true;
                } else {
                    alert('Please enter both IDs to start the chat');
                }
            };

            $scope.sendMessage = function (newMessage = '') {
                if (newMessage) {
                    const clientOffset = `${socket.id}-${counter++}`;
                    var message = {
                        name: $scope.myId,
                        message: newMessage,
                        timestamp: new Date().toISOString().slice(0, 19).replace('T', ' ')
                    };
                    socket.emit('send msg', message, $scope.room, clientOffset);
                    $scope.$applyAsync(() => {
                        $scope.messages.push(message);
                        $scope.newMessage = '';
                        $scope.scrollToBottom();
                    });
                }
            };

            $scope.loadMoreMessages = function () {
                if (lastMessageId) {
                    socket.emit('load more messages', {room: $scope.room, lastMessageId: lastMessageId});
                }
            };
            socket.on('load more messages', function (messages) {
                $scope.$apply(function () {
                    $scope.messages = messages.concat($scope.messages).filter((message, index, self) =>
                        index === self.findIndex((m) => m.id === message.id)
                    );
                    $scope.messages.sort((a, b) => a.id - b.id);
                    lastMessageId = $scope.messages[0].id;
                });
            });
            $scope.scrollToBottom = function () {
                setTimeout(() => {
                    const chatWindow = document.querySelector('.chat-window');
                    if (chatWindow) {
                        chatWindow.scrollTo({
                            top: chatWindow.scrollHeight,
                            behavior: 'smooth',
                            speed: 1000
                        });
                    }
                }, 100);
            };

            $scope.reset = function () {
                socket.emit('leave room', $scope.room);
                $scope.$applyAsync(() => {
                    $scope.connected = false;
                    $scope.messages = [];
                    $scope.myId = '';
                    $scope.friendId = '';
                    $scope.newMessage = '';
                    $scope.room = '';
                });
            };
            $scope.checkEnter = function (event, element) {
                if (event.key === 'Enter') {
                    $scope.sendMessage(element);
                }
            };
        });
</script>
</body>
</html>
